generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Admin
  Client
  Editor
}

enum SchoolType {
  PublicStateUniversity
  PrivateUniversity
}

enum ProgramType {
  HND
  BTECH
  LICENCE
}

enum ProgramField {
  SCIENCE
  TECHNOLOGY
  HEALTH
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  type      UserType
  token     String?
  isActive  Boolean  @default(false)
  isDeleted Boolean  @default(false)

  admin   User?   @relation("UserAdmin", fields: [adminId], references: [id])
  adminId String?

  schoolsCreated        School[]
  programsCreated       Program[]
  schoolProgramsCreated SchoolProgram[]
  schoolRatings         SchoolRating[]
  coursesCreated        Course[]
  usersCreated          User[]          @relation("UserAdmin")
}

model School {
  id          String     @id @default(uuid())
  name        String     @unique
  type        SchoolType
  longitude   Float
  latitude    Float
  country     String
  city        String
  visits      Int        @default(0)
  rating      Float      @default(0)
  email       String?
  phoneNumber String?
  website     String?
  description String?
  pictures    String[]
  isDeleted   Boolean    @default(false)

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  schoolPrograms SchoolProgram[]
  schoolRatings  SchoolRating[]
}

model Program {
  id          String       @id @default(uuid())
  name        String
  description String
  type        ProgramType
  field       ProgramField
  duration    Float
  isDeleted   Boolean      @default(false)

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  schoolPrograms SchoolProgram[]
}

model SchoolProgram {
  id        String  @id @default(uuid())
  price     Float?
  visits    Int     @default(0)
  isDeleted Boolean @default(false)

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String

  schoolProgramCourses SchoolProgramCourse[]
}

model Course {
  id          String  @id @default(uuid())
  code        String
  title       String
  description String
  credits     Int
  isDeleted   Boolean @default(false)

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  schoolProgramCourses SchoolProgramCourse[]
}

model SchoolProgramCourse {
  id        String  @id @default(uuid())
  isDeleted Boolean @default(false)

  course          Course        @relation(fields: [courseId], references: [id])
  courseId        String
  schoolProgram   SchoolProgram @relation(fields: [schoolProgramId], references: [id])
  schoolProgramId String
}

model SchoolRating {
  id        String  @id @default(uuid())
  stars     Float
  message   String
  isDeleted Boolean @default(false)

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String
}

// Delete the search school-program in the school-program controller.  

// Position yourself on the school table and work on the search query. It is possible to do something like an a left join with the program table. (don't forget the price too)

// const { Client } = require("pg"); // Assuming you're using pg library

// // Input body structure
// const filters = [
//   { field: "name", operator: "eq", value: "test" },
//   { field: "type", operator: "eq", value: "asdf" },
//   { field: "rating", operator: "gte", value: 4.5 },
//   { field: "isDeleted", operator: "eq", value: false },
// ];

// // Map of supported operators
// const operatorsMap = {
//   eq: "=",
//   neq: "!=",
//   gt: ">",
//   gte: ">=",
//   lt: "<",
//   lte: "<=",
//   like: "ILIKE",
// };

// // Start query
// let query = `
//   SELECT DISTINCT s.*
//   FROM "School" s
//   LEFT JOIN "SchoolProgram" sp ON s.id = sp."schoolId" AND sp."isDeleted" = FALSE
//   LEFT JOIN "Program" p ON sp."programId" = p.id
//   WHERE 1=1`; // Start with a default true condition to simplify adding AND clauses

// const queryParams = [];

// // Process filters
// filters.forEach((filter) => {
//   const { field, operator, value } = filter;
//   const sqlOperator = operatorsMap[operator];
//   if (sqlOperator && value !== undefined) {
//     query += ` AND ${field} ${sqlOperator} $${queryParams.length + 1}`;
//     queryParams.push(value);
//   }
// });

// // Add ordering or pagination (optional)
// query += ` ORDER BY s.name ASC`; // Example: ordering by school name

// // Debugging output
// console.log("Generated Query:", query);
// console.log("Query Parameters:", queryParams);

// // Example database execution
// (async () => {
//   const client = new Client({
//     user: "your_username",
//     host: "your_host",
//     database: "your_database",
//     password: "your_password",
//     port: 5432,
//   });

//   await client.connect();
//   try {
//     const result = await client.query(query, queryParams);
//     console.log("Query Result:", result.rows);
//   } catch (error) {
//     console.error("Error Executing Query:", error);
//   } finally {
//     await client.end();
//   }
// })();

// think on adding the currency on the school-program table.
