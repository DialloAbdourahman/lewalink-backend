generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Admin
  Client
  Editor
}

enum SchoolType {
  PublicStateUniversity
  PrivateUniversity
}

enum ProgramType {
  HND
  BTECH
  LICENCE
}

enum ProgramField {
  SCIENCE
  TECHNOLOGY
  HEALTH
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  type      UserType
  token     String?
  isActive  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin   User?   @relation("UserAdmin", fields: [adminId], references: [id])
  adminId String?

  schoolsCreated        School[]
  programsCreated       Program[]
  schoolProgramsCreated SchoolProgram[]
  schoolRatings         SchoolRating[]
  coursesCreated        Course[]
  programCourses        ProgramCourse[]
  usersCreated          User[]          @relation("UserAdmin")
}

model School {
  id          String     @id @default(uuid())
  name        String     @unique
  type        SchoolType
  longitude   Float
  latitude    Float
  country     String
  city        String
  visits      Int        @default(0)
  rating      Float      @default(0)
  email       String?
  phoneNumber String?
  website     String?
  description String?
  pictures    String[]
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  schoolPrograms SchoolProgram[]
  schoolRatings  SchoolRating[]
}

model Program {
  id          String       @id @default(uuid())
  name        String
  description String
  type        ProgramType
  field       ProgramField
  duration    Float
  isDeleted   Boolean      @default(false)
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  schoolPrograms SchoolProgram[]
  programCourses ProgramCourse[]
}

model SchoolProgram {
  id        String   @id @default(uuid())
  price     Float?
  visits    Int      @default(0)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
}

model Course {
  id          String   @id @default(uuid())
  code        String
  title       String
  description String
  credits     Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  programCourses ProgramCourse[]
}

model ProgramCourse {
  id        String   @id @default(uuid())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  program   Program @relation(fields: [programId], references: [id])
  programId String
}

model SchoolRating {
  id        String   @id @default(uuid())
  stars     Float
  message   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String
}

// FURTURE CHANGES
// Try to add indexes to relevant fields like email to fasten searches. 
// Think about order by price (should it be second, third, etc etc).
// Think on adding the currency on the school-program table.
// Think on having a single search where the user can have only one search bar and can enter the program name or the school name. 
