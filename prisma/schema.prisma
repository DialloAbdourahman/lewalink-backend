generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Admin
  Client
  Editor
}

enum SchoolType {
  PUBLIC_PRIMARY_SCHOOL
  PRIVATE_PRIMARY_SCHOOL
  PUBLIC_SECONDARY_SCHOOL
  PRIVATE_SECONDARY_SCHOOL
  PUBLIC_STATE_UNIVERSITY
  PRIVATE_UNIVERSITY
  INTERNATIONAL_SCHOOL
  TECHNICAL_SCHOOL
  VOCATIONAL_SCHOOL
  COMMUNITY_COLLEGE
  POLYTECHNIC
  GRANDE_ECOLE
  LYCEE_PUBLIC
  LYCEE_PRIVE
  COLLEGE_PUBLIC
  COLLEGE_PRIVE
  ECOLE_MATERNELLE
  ECOLE_ELEMENTAIRE
  UNIVERSITE_PUBLIQUE
  UNIVERSITE_PRIVEE
  ECOLE_SUPERIEURE
  ECOLE_DE_COMMERCE
  ECOLE_D_INGENIEURS
  ECOLE_DES_ARTS
}

enum ProgramType {
  CERTIFICATE
  DIPLOMA
  ASSOCIATE_DEGREE
  HND
  BTECH
  LICENCE
  LICENCE_PROFESSIONNELLE
  BACHELORS
  MASTERS
  MASTER_PROFESSIONNEL
  MASTER_RECHERCHE
  MBA
  PHD
  DOCTORAT
  POSTDOCTORAL
  POSTDOC
  PROFESSIONAL_CERTIFICATION
  CERTIFICATION_PROFESSIONNELLE
  VOCATIONAL_TRAINING
  FORMATION_PROFESSIONNELLE
  ONLINE_COURSE
  COURS_EN_LIGNE
  EXECUTIVE_EDUCATION
  EDUCATION_EXECUTIVE
  CONTINUING_EDUCATION
  FORMATION_CONTINUE
  BTS
  DUT
  DEUG
  DEUST
  CAP
  BEP
  GRANDE_ECOLE
  CLASSE_PREPA
  CPGE
}

enum ProgramField {
  SCIENCE
  TECHNOLOGY
  ENGINEERING
  MATHEMATICS
  MEDICINE
  HEALTH
  LAW
  BUSINESS
  ECONOMICS
  EDUCATION
  PSYCHOLOGY
  SOCIOLOGY
  POLITICAL_SCIENCE
  PHILOSOPHY
  HISTORY
  LITERATURE
  LINGUISTICS
  ART
  MUSIC
  THEATER
  FILM
  DESIGN
  ARCHITECTURE
  AGRICULTURE
  ENVIRONMENTAL_SCIENCE
  ASTRONOMY
  CHEMISTRY
  PHYSICS
  BIOLOGY
  BIOTECHNOLOGY
  DATA_SCIENCE
  COMPUTER_SCIENCE
  ARTIFICIAL_INTELLIGENCE
  ROBOTICS
  CYBERSECURITY
  INFORMATION_TECHNOLOGY
  SOFTWARE_ENGINEERING
  NETWORK_ENGINEERING
  CLOUD_COMPUTING
  DIGITAL_MARKETING
  JOURNALISM
  COMMUNICATIONS
  PUBLIC_RELATIONS
  ANTHROPOLOGY
  GEOGRAPHY
  URBAN_PLANNING
  SOCIAL_WORK
  RELIGIOUS_STUDIES
  SPORTS_SCIENCE
  NUTRITION
  GENETICS
  NEUROSCIENCE
  MARINE_BIOLOGY
  FORENSIC_SCIENCE
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  FOK
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KID
  KMF
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLE
  SLL
  SOS
  SRD
  SSP
  STN
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TVD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VES
  VND
  VUV
  WST
  XAF
  XCD
  XDR
  XOF
  XPF
  YER
  ZAR
  ZMW
  ZWL
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  type      UserType
  token     String?
  isActive  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User?   @relation("UserAdmin", fields: [creatorId], references: [id])
  creatorId String?

  schoolsCreated        School[]
  programsCreated       Program[]
  schoolProgramsCreated SchoolProgram[]
  schoolRatings         SchoolRating[]
  coursesCreated        Course[]
  programCourses        ProgramCourse[]
  usersCreated          User[]          @relation("UserAdmin")

  @@index([token])
  @@index([name, type])
  @@index([isDeleted, type])
}

model School {
  id          String     @id @default(uuid())
  name        String     @unique
  type        SchoolType
  longitude   Float
  latitude    Float
  country     String
  city        String
  visits      Int        @default(0)
  rating      Float      @default(0)
  email       String?
  phoneNumber String?
  website     String?
  description String?
  pictures    String[]
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  schoolPrograms SchoolProgram[]
  schoolRatings  SchoolRating[]

  @@index([isDeleted, type])
  @@index([name])
  @@index([country])
  @@index([city])
  @@index([rating])
  @@index([visits])
  @@index([longitude, latitude])
}

model Program {
  id          String       @id @default(uuid())
  name        String
  description String
  type        ProgramType
  field       ProgramField
  duration    Float
  isDeleted   Boolean      @default(false)
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  schoolPrograms SchoolProgram[]
  programCourses ProgramCourse[]

  @@index([isDeleted])
  @@index([name])
  @@index([field])
  @@index([type])
}

model SchoolProgram {
  id        String   @id @default(uuid())
  price     Float
  currency  Currency
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String

  @@index([schoolId, isDeleted])
  @@index([programId, isDeleted])
  @@index([price])
  @@index([schoolId, programId])
}

model Course {
  id          String   @id @default(uuid())
  code        String
  title       String
  description String
  credits     Int?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  programCourses ProgramCourse[]

  @@index([title, isDeleted])
  @@index([credits])
  @@index([title])
}

model ProgramCourse {
  id        String   @id @default(uuid())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  program   Program @relation(fields: [programId], references: [id])
  programId String

  @@index([courseId, isDeleted])
  @@index([programId, isDeleted])
  @@index([courseId, programId])
}

model SchoolRating {
  id        String   @id @default(uuid())
  stars     Float
  message   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  @@index([schoolId, isDeleted])
  @@index([schoolId, clientId, isDeleted])
}

// FURTURE CHANGES

// Think about order by price (should it be second, third, etc etc).
// Think on having a single search where the user can have only one search bar and can enter the program name or the school name. 
