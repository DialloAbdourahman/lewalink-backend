# Program module routes

/api/program/v1/:
  post:
    summary: Create a new program
    tags:
      - Program module
    description: Only **Admin** or **Editor** roles can create programs.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - description
              - duration
            properties:
              name:
                type: string
                example: "Bachelor of Science in Computer Science"
              description:
                type: string
                example: "CS undergraduate program"
              duration:
                type: integer
                description: Duration in years
                example: 4
    responses:
      201:
        description: Program created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "SUCCESS"
                data:
                  $ref: '#/components/schemas/Program'
      400:
        description: Validation error or duplicate program
      401:
        description: Unauthorized

  get:
    summary: Get list of programs
    tags:
      - Program module
    parameters:
      - in: query
        name: name
        schema:
          type: string
        description: Filter by program name (partial, case-insensitive)
      - in: query
        name: type
        schema:
          type: string
        description: Program type (e.g., Bachelor, Master)
      - in: query
        name: field
        schema:
          type: string
        description: Program field/discipline (e.g., Engineering)
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: itemsPerPage
        schema:
          type: integer
    responses:
      200:
        description: Paginated list of programs
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "SUCCESS"
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Program'
      400:
        description: Validation error – query parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        x-errors:
          - code: "VALIDATION_REQUEST_ERROR"
            message: "Numeric query parameters must be numbers"

/api/program/v1/{id}:
  parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
  patch:
    summary: Update a program
    tags:
      - Program module
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              duration:
                type: integer
    responses:
      200:
        description: Program updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "SUCCESS"
                data:
                  $ref: '#/components/schemas/Program'
      404:
        description: Program not found
  get:
    summary: Get a single program by ID
    tags:
      - Program module
    responses:
      200:
        description: Program details
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "SUCCESS"
                data:
                  $ref: '#/components/schemas/Program'
      404:
        description: Program not found
  delete:
    summary: Delete (soft-delete) a program
    tags:
      - Program module
    responses:
      200:
        description: Program deleted successfully
      404:
        description: Program not found

/api/program/v1/restore/{id}:
  post:
    summary: Restore a program
    tags:
      - Program module
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    responses:
      200:
        description: Program restored successfully
      404:
        description: Program not found

/api/program/v1/super-user-get-programs:
  get:
    summary: Admin/Editor – list all programs including deleted
    tags:
      - Program module
    security:
      - bearerAuth: []
    responses:
      200:
        description: List including deleted programs

/api/program/v1/super-user-get-program/{id}:
  get:
    summary: Admin/Editor – get program details including deleted
    tags:
      - Program module
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    security:
      - bearerAuth: []
    responses:
      200:
        description: Program details
      404:
        description: Program not found
